import telebot
from telebot import types
import sqlite3
import random
from datetime import datetime

BOT_TOKEN = ""
bot = telebot.TeleBot(BOT_TOKEN)

#–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
MOTIVATIONAL_QUOTES = [
    "¬´–Ø –ø–ª–∞–∫–∞–ª, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –º–µ–Ω—è –Ω–µ –±—ã–ª–æ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –∫–µ–¥, –Ω–æ –æ–¥–Ω–∞–∂–¥—ã —è –≤—Å—Ç—Ä–µ—Ç–∏–ª —á–µ–ª–æ–≤–µ–∫–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –±—ã–ª–æ –Ω–æ–≥¬ª, ‚Äî –ó–∏–Ω–µ–¥–∏–Ω –ó–∏–¥–∞–Ω",
    "¬´–Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–Ω–∏–º–∞–ª –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ ¬´—Å–¥–∞—Ç—å—Å—è¬ª, ‚Äî –ñ–∞–Ω-–ö–ª–æ–¥ –í–∞–Ω –î–∞–º–º",
    "¬´–Ø –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è 9000 —Ä–∞–∑ –∑–∞ —Å–≤–æ—é –∫–∞—Ä—å–µ—Ä—É. –Ø –ø—Ä–æ–∏–≥—Ä–∞–ª –ø–æ—á—Ç–∏ 300 –∏–≥—Ä. 26 —Ä–∞–∑ –º–Ω–µ –±—ã–ª –¥–æ–≤–µ—Ä–µ–Ω —Ä–µ—à–∞—é—â–∏–π –±—Ä–æ—Å–æ–∫, –∏ —è –ø—Ä–æ–º–∞—Ö–∏–≤–∞–ª—Å—è. –Ø —Ç–µ—Ä–ø–µ–ª –ø–æ—Ä–∞–∂–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –∏ —Å–Ω–æ–≤–∞. –ò –∏–º–µ–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É —è –¥–æ—Å—Ç–∏–≥ —É—Å–ø–µ—Ö–∞¬ª, ‚Äî –ú–∞–π–∫–ª –î–∂–æ—Ä–¥–∞–Ω",
    "¬´–°–∏–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –≤—ã–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞–µ—à—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ ‚Äî –∏ –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º –∑–∞–ª–µ, –∏ –≤ –∂–∏–∑–Ω–∏¬ª, ‚Äî –ê—Ä–Ω–æ–ª—å–¥ –®–≤–∞—Ä—Ü–µ–Ω–µ–≥–≥–µ—Ä",
    "¬´–¢—Ä–µ–Ω–∏—Ä—É–π—Å—è —Å —Ç–µ–º–∏, –∫—Ç–æ —Å–∏–ª—å–Ω–µ–µ. –ù–µ —Å–¥–∞–≤–∞–π—Å—è —Ç–∞–º, –≥–¥–µ —Å–¥–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–µ. –ò –ø–æ–±–µ–¥–∏—à—å —Ç–∞–º, –≥–¥–µ –ø–æ–±–µ–¥–∏—Ç—å –Ω–µ–ª—å–∑—è¬ª, ‚Äî –ë—Ä—é—Å –õ–∏",
    "¬´–ù–∞—É—á–∏—Ç–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –¥–æ –∫–æ–Ω—Ü–∞ –±–æ—Ä–æ—Ç—å—Å—è –∑–∞ –ª—é–±–æ–µ –º–µ—Å—Ç–æ, –∏ –æ–Ω —Å—É–º–µ–µ—Ç —Å—Ä–∞–∂–∞—Ç—å—Å—è –∑–∞ –ø–µ—Ä–≤–æ–µ¬ª, ‚Äî –õ–∞—Ä–∏—Å–∞ –õ–∞—Ç—ã–Ω–∏–Ω–∞",
    "¬´–£—Å–ø–µ—Ö –Ω–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å. –≠—Ç–æ —Ç—è–∂—ë–ª–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –æ–±—É—á–µ–Ω–∏–µ, –∏–∑—É—á–µ–Ω–∏–µ, –∂–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏–µ –∏, –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ, –ª—é–±–æ–≤—å –∫ —Ç–æ–º—É, —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –∏–ª–∏ —É—á–∏—Ç–µ—Å—å –¥–µ–ª–∞—Ç—å¬ª, ‚Äî –ü–µ–ª–µ",
    "¬´–¢–æ—Ç, –∫—Ç–æ —Ö–æ—á–µ—Ç –¥–æ–±–∏—Ç—å—Å—è —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥, –æ–±—è–∑–∞–Ω –ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä—ã–≥–Ω—É—Ç—å –≤—ã—à–µ –≥–æ–ª–æ–≤—ã¬ª, ‚Äî –õ–µ–≤ –Ø—à–∏–Ω",
    "¬´–ú—ã –Ω–µ —Ö–æ—Ç–∏–º —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ —Å–≤–æ–∏—Ö –º–µ—á—Ç–∞—Ö, –º—ã —Ö–æ—Ç–∏–º –∏—Ö –ø–æ–∫–∞–∑–∞—Ç—å¬ª. ‚Äì –ö—Ä–∏—à—Ç–∏–∞–Ω—É –†–æ–Ω–∞–ª–¥—É",
    "¬´–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å—Ç–æ–∏—Ç –º–µ–∂–¥—É —Ç–æ–±–æ–π –∏ —Ç–≤–æ–∏–º —É—Å–ø–µ—Ö–æ–º, —É–±–µ—Ä–∏ —ç—Ç–æ. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–∫–∞–∑—ã–≤–∞–π—Å—è¬ª. ‚Äì –î—É—ç–π–Ω ¬´–°–∫–∞–ª–∞¬ª –î–∂–æ–Ω—Å–æ–Ω"
]

#–ü–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
WORKOUT_PLANS = {
    "beginner": """
üßò‚Äç‚ôÇÔ∏è –ù–ê–ß–ê–õ–¨–ù–´–ô –£–†–û–í–ï–ù–¨ (3 –¥–Ω—è/–Ω–µ–¥–µ–ª—é)

–î–µ–Ω—å 1: –ì—Ä—É–¥—å + –¢—Ä–∏—Ü–µ–ø—Å
‚Ä¢ –ñ–∏–º –ª–µ–∂–∞: 3—Ö10
‚Ä¢ –û—Ç–∂–∏–º–∞–Ω–∏—è: 3—Ö–º–∞–∫—Å
‚Ä¢ –†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –≥–∞–Ω—Ç–µ–ª–µ–π: 3—Ö12
‚Ä¢ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º: 3—Ö12

–î–µ–Ω—å 2: –°–ø–∏–Ω–∞ + –ë–∏—Ü–µ–ø—Å
‚Ä¢ –¢—è–≥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞: 3—Ö10
‚Ä¢ –¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ: 3—Ö10
‚Ä¢ –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è: 3—Ö–º–∞–∫—Å
‚Ä¢ –°–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫: 3—Ö12

–î–µ–Ω—å 3: –ù–æ–≥–∏
‚Ä¢ –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è: 3—Ö10
‚Ä¢ –†—É–º—ã–Ω—Å–∫–∞—è —Ç—è–≥–∞ 3*8-12
‚Ä¢ –†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3*12-15
‚Ä¢ –°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3*12-15
""",
    "intermediate": """
üèãÔ∏è –°–†–ï–î–ù–ò–ô –£–†–û–í–ï–ù–¨ (4 –¥–Ω—è/–Ω–µ–¥–µ–ª—é)

–î–µ–Ω—å 1: –ì—Ä—É–¥—å
‚Ä¢ –ñ–∏–º –ª–µ–∂–∞: 4—Ö8
‚Ä¢ –ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –Ω–∞–∫–ª–æ–Ω–Ω–æ–π: 3—Ö10
‚Ä¢ –ö—Ä–æ—Å—Å–æ–≤–µ—Ä: 3—Ö12
‚Ä¢ –û—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ –±—Ä—É—Å—å—è—Ö: 3—Ö–º–∞–∫—Å

–î–µ–Ω—å 2: –°–ø–∏–Ω–∞
‚Ä¢ –°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞: 4—Ö6
‚Ä¢ –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è: 4—Ö–º–∞–∫—Å
‚Ä¢ –¢—è–≥–∞ –¢-–≥—Ä–∏—Ñ–∞: 3—Ö10
‚Ä¢ –¢—è–≥–∞ –Ω–∏–∂–Ω–µ–≥–æ –±–ª–æ–∫–∞: 3—Ö12

–î–µ–Ω—å 3: –ù–æ–≥–∏
‚Ä¢ –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å–æ —à—Ç–∞–Ω–≥–æ–π: 4—Ö8
‚Ä¢ –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è –≤ –ì–∞–∫–∫-—Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ 3*8-12
‚Ä¢ –í—ã–ø–∞–¥—ã –Ω–∞ –º–µ—Å—Ç–µ 3*8-12
‚Ä¢ –ò–∫—Ä—ã —Å—Ç–æ—è: 4—Ö15

–î–µ–Ω—å 4: –ü–ª–µ—á–∏ + –†—É–∫–∏
‚Ä¢ –ê—Ä–º–µ–π—Å–∫–∏–π –∂–∏–º: 4—Ö8
‚Ä¢ –ú–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏: 3—Ö12
‚Ä¢ –ü–æ–¥—ä–µ–º —à—Ç–∞–Ω–≥–∏ –Ω–∞ –±–∏—Ü–µ–ø—Å: 3—Ö10
‚Ä¢ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º: 3—Ö12
""",
    "home": """
üè† –î–û–ú–ê–®–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–ö–ò

–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å:
‚Ä¢ –û—Ç–∂–∏–º–∞–Ω–∏—è: 4—Ö15
‚Ä¢ –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è: 4—Ö20
‚Ä¢ –ü–ª–∞–Ω–∫–∞: 3—Ö60 —Å–µ–∫
‚Ä¢ –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è: 4—Ö20
‚Ä¢ –ë–µ—Ä–ø–∏: 3—Ö10
‚Ä¢ –í—ã–ø–∞–¥—ã: 3—Ö15 –Ω–∞ –Ω–æ–≥—É
"""
}


#–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('fitness.db', check_same_thread=False)
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            weight REAL,
            height REAL,
            age INTEGER,
            goal TEXT
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS workouts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            type TEXT,
            duration INTEGER,
            date TEXT
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS nutrition (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            calories INTEGER,
            protein REAL,
            fat REAL,
            carbs REAL,
            date TEXT
        )
    ''')

    conn.commit()
    conn.close()

def init_reminders_db():
    conn = sqlite3.connect('fitness.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            time TEXT,
            days TEXT
        )
    ''')
    conn.commit()
    conn.close()


#–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "üìùÔ∏è –ü–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
    keyboard.row("ü•ó –î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
    keyboard.row("üó£ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    keyboard.row("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    return keyboard


def workout_plans_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–ù–∞—á–∞–ª—å–Ω—ã–π", callback_data="plan_beginner"))
    keyboard.add(types.InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π", callback_data="plan_intermediate"))
    keyboard.add(types.InlineKeyboardButton("–î–æ–º–∞—à–Ω–∏–π", callback_data="plan_home"))
    return keyboard


def goals_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±–æ—Ä –º–∞—Å—Å—ã", "üö¥‚Äç‚ôÄÔ∏è –ü–æ—Ö—É–¥–µ–Ω–∏–µ")
    keyboard.row("‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ", "‚õπÔ∏è‚Äç‚ôÇÔ∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å")
    return keyboard


#–ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    username = message.from_user.first_name

    conn = sqlite3.connect('fitness.db')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()

    if not user:
        bot.send_message(
            message.chat.id,
            f"ü§ó –ü—Ä–∏–≤–µ—Ç, {username}!\n"
            f"–Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä! –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Ñ–∏–ª—å.\n"
            f"–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å –≤ –∫–≥:"
        )
        bot.register_next_step_handler(message, get_weight)
    else:
        bot.send_message(
            message.chat.id,
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username}!",
            reply_markup=main_keyboard()
        )

    conn.close()


def get_weight(message):
    try:
        weight = float(message.text)
        bot.send_message(message.chat.id, "üìè –í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–º:")
        bot.register_next_step_handler(message, get_height, weight)
    except:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 36)")
        bot.register_next_step_handler(message, get_weight)


def get_height(message, weight):
    try:
        height = float(message.text)
        bot.send_message(message.chat.id, "üéÇ –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
        bot.register_next_step_handler(message, get_age, weight, height)
    except:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100)")
        bot.register_next_step_handler(message, get_height, weight)


def get_age(message, weight, height):
    try:
        age = int(message.text)
        bot.send_message(
            message.chat.id,
            "üéØ –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å:",
            reply_markup=goals_keyboard()
        )
        bot.register_next_step_handler(message, get_goal, weight, height, age)
    except:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
        bot.register_next_step_handler(message, get_age, weight, height)


def get_goal(message, weight, height, age):
    goal = message.text
    user_id = message.from_user.id
    username = message.from_user.first_name

    conn = sqlite3.connect('fitness.db')
    cursor = conn.cursor()

    cursor.execute(
        'INSERT OR REPLACE INTO users VALUES (?, ?, ?, ?, ?, ?)',
        (user_id, username, weight, height, age, goal)
    )
    conn.commit()
    conn.close()

    bot.send_message(
        message.chat.id,
        f"‚òëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n"
        f"‚Ä¢ –í–µ—Å: {weight} –∫–≥\n"
        f"‚Ä¢ –†–æ—Å—Ç: {height} —Å–º\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
        f"‚Ä¢ –¶–µ–ª—å: {goal}",
        reply_markup=main_keyboard()
    )


#–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
@bot.message_handler(func=lambda message: message.text == "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
def show_progress(message):
    user_id = message.from_user.id

    conn = sqlite3.connect('fitness.db')
    cursor = conn.cursor()

    #–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()

    #–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    cursor.execute(
        'SELECT * FROM workouts WHERE user_id = ? ORDER BY date DESC LIMIT 3',
        (user_id,)
    )
    workouts = cursor.fetchall()

    #–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–∏—Ç–∞–Ω–∏–µ
    cursor.execute(
        'SELECT * FROM nutrition WHERE user_id = ? ORDER BY date DESC LIMIT 1',
        (user_id,)
    )
    nutrition = cursor.fetchone()

    response = "üìà –¢–í–û–ô –ü–†–û–ì–†–ï–°–°\n\n"

    if user:
        response += f"üìè –ü—Ä–æ—Ñ–∏–ª—å:\n‚Ä¢ –í–µ—Å: {user[2]} –∫–≥\n‚Ä¢ –†–æ—Å—Ç: {user[3]} —Å–º\n‚Ä¢ –¶–µ–ª—å: {user[5]}\n\n"

    if workouts:
        response += "üèãÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
        for workout in workouts:
            response += f"‚Ä¢ {workout[2]} - {workout[3]} –º–∏–Ω\n"
    else:
        response += "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç\n"

    if nutrition:
        response += f"\nü•ó –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–∏—Ç–∞–Ω–∏–µ:\n‚Ä¢ {nutrition[2]} –∫–∫–∞–ª\n‚Ä¢ –ë: {nutrition[3]}–≥, –ñ: {nutrition[4]}–≥, –£: {nutrition[5]}–≥"

    bot.send_message(message.chat.id, response)
    conn.close()


#–ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
@bot.message_handler(commands=['reset'])
def reset_command(message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚òëÔ∏è –î–∞", callback_data="reset_confirm"))
    keyboard.add(types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="reset_cancel"))

    bot.send_message(
        message.chat.id,
        "‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        reply_markup=keyboard
    )


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('reset_'))
def handle_reset(call):
    if call.data == "reset_confirm":
        conn = sqlite3.connect('fitness.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM users WHERE user_id = ?', (call.from_user.id,))
        cursor.execute('DELETE FROM workouts WHERE user_id = ?', (call.from_user.id,))
        cursor.execute('DELETE FROM nutrition WHERE user_id = ?', (call.from_user.id,))
        conn.commit()
        conn.close()

        bot.send_message(call.message.chat.id, "‚òëÔ∏è –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π /start")
    else:
        bot.send_message(call.message.chat.id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

    bot.delete_message(call.message.chat.id, call.message.message_id)


#–ü–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
@bot.message_handler(func=lambda message: message.text == "üìùÔ∏è –ü–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
def show_workout_plans(message):
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:",
        reply_markup=workout_plans_keyboard()
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('plan_'))
def send_workout_plan(call):
    plan_type = call.data.split('_')[1]
    plan = WORKOUT_PLANS.get(plan_type, "–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    bot.send_message(call.message.chat.id, plan)


#–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
def add_workout(message):
    bot.send_message(message.chat.id, "‚ùî –ö–∞–∫–∞—è –±—ã–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–∏–ª–æ–≤–∞—è, –∫–∞—Ä–¥–∏–æ, –π–æ–≥–∞)")
    bot.register_next_step_handler(message, get_workout_type)


def get_workout_type(message):
    workout_type = message.text
    bot.send_message(message.chat.id, "‚ùî –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª–∏–ª–∞—Å—å?")
    bot.register_next_step_handler(message, get_workout_duration, workout_type)


def get_workout_duration(message, workout_type):
    try:
        duration = int(message.text)
        user_id = message.from_user.id
        date = datetime.now().strftime("%Y-%m-%d %H:%M")

        conn = sqlite3.connect('fitness.db')
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO workouts (user_id, type, duration, date) VALUES (?, ?, ?, ?)',
            (user_id, workout_type, duration, date)
        )
        conn.commit()
        conn.close()

        bot.send_message(
            message.chat.id,
            f"‚òëÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n‚Ä¢ {workout_type} - {duration} –º–∏–Ω"
        )
    except:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç")


#–î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ
@bot.message_handler(func=lambda message: message.text == "ü•ó –î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ")
def add_nutrition(message):
    bot.send_message(message.chat.id, "ü•ó –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π:")
    bot.register_next_step_handler(message, get_calories)


def get_calories(message):
    try:
        calories = int(message.text)
        bot.send_message(message.chat.id, "üçó –í–≤–µ–¥–∏ –±–µ–ª–∫–∏ (–≥):")
        bot.register_next_step_handler(message, get_protein, calories)
    except:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")


def get_protein(message, calories):
    try:
        protein = float(message.text)
        bot.send_message(message.chat.id, "ü•ë –í–≤–µ–¥–∏ –∂–∏—Ä—ã (–≥):")
        bot.register_next_step_handler(message, get_fat, calories, protein)
    except:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
        bot.register_next_step_handler(message, get_protein, calories)


def get_fat(message, calories, protein):
    try:
        fat = float(message.text)
        bot.send_message(message.chat.id, "üçõ –í–≤–µ–¥–∏ —É–≥–ª–µ–≤–æ–¥—ã (–≥):")
        bot.register_next_step_handler(message, get_carbs, calories, protein, fat)
    except:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
        bot.register_next_step_handler(message, get_fat, calories, protein)


def get_carbs(message, calories, protein, fat):
    try:
        carbs = float(message.text)
        user_id = message.from_user.id
        date = datetime.now().strftime("%Y-%m-%d %H:%M")

        conn = sqlite3.connect('fitness.db')
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO nutrition (user_id, calories, protein, fat, carbs, date) VALUES (?, ?, ?, ?, ?, ?)',
            (user_id, calories, protein, fat, carbs, date)
        )
        conn.commit()
        conn.close()

        bot.send_message(
            message.chat.id,
            f"‚òëÔ∏è –ü–∏—Ç–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n"
            f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {calories}\n"
            f"‚Ä¢ –ë: {protein}–≥, –ñ: {fat}–≥, –£: {carbs}–≥"
        )
    except:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")


#–ú–æ—Ç–∏–≤–∞—Ü–∏—è
@bot.message_handler(func=lambda message: message.text == "üó£ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")
def send_motivation(message):
    quote = random.choice(MOTIVATIONAL_QUOTES)
    bot.send_message(message.chat.id, f"üí≠ {quote}")


#–ü—Ä–æ—Ñ–∏–ª—å
@bot.message_handler(func=lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def show_profile(message):
    user_id = message.from_user.id

    conn = sqlite3.connect('fitness.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()

    if user:
        response = (
            f"üë§ –¢–í–û–ô –ü–†–û–§–ò–õ–¨\n\n"
            f"‚Ä¢ –ò–º—è: {user[1]}\n"
            f"‚Ä¢ –í–µ—Å: {user[2]} –∫–≥\n"
            f"‚Ä¢ –†–æ—Å—Ç: {user[3]} —Å–º\n"
            f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user[4]} –ª–µ—Ç\n"
            f"‚Ä¢ –¶–µ–ª—å: {user[5]}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
        )
    else:
        response = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start"

    bot.send_message(message.chat.id, response)


@bot.message_handler(func=lambda message: message.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
def reminders_menu(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "‚ùå –£–¥–∞–ª–∏—Ç—å")
    keyboard.row("üìÉ –°–ø–∏—Å–æ–∫", "‚óÄÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:", reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
def set_reminder(message):
    bot.send_message(message.chat.id, "üïê –í–≤–µ–¥–∏ –≤—Ä–µ–º—è:")
    bot.register_next_step_handler(message, get_reminder_time)


def get_reminder_time(message):
    try:
        time_str = message.text
        datetime.strptime(time_str, "%H:%M")
        bot.send_message(
            message.chat.id,
            "üìÖ –í –∫–∞–∫–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å?\n"
            "–ù–∞–ø–∏—à–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–æ–º–µ—Ä–∞ –¥–Ω–µ–π:\n"
            "1-–ü–ù, 2-–í–¢, 3-–°–†, 4-–ß–¢, 5-–ü–¢, 6-–°–ë, 7-–í–°\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 1,3,5 –∏–ª–∏ 2,4,6,7"
        )
        bot.register_next_step_handler(message, get_reminder_days, time_str)
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)"
        )
        bot.register_next_step_handler(message, get_reminder_time)


def get_reminder_days(message, time_str):
    try:
        user_id = message.from_user.id
        days_input = message.text
        days_list = [day.strip() for day in days_input.split(',')]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–Ω–∏ –æ—Ç 1 –¥–æ 7
        valid_days = True
        for day in days_list:
            if not day.isdigit() or int(day) < 1 or int(day) > 7:
                valid_days = False
                break

        if not valid_days:
            bot.send_message(
                message.chat.id,
                "‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π –Ω–æ–º–µ—Ä–∞ –æ—Ç 1 –¥–æ 7 —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5)\n"
                "1-–ü–ù, 2-–í–¢, 3-–°–†, 4-–ß–¢, 5-–ü–¢, 6-–°–ë, 7-–í–°"
            )
            return

        days_str = ','.join(days_list)

        conn = sqlite3.connect('fitness.db')
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO reminders (user_id, time, days) VALUES (?, ?, ?)',
            (user_id, time_str, days_str)
        )
        conn.commit()
        conn.close()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ø–æ–Ω—è—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        day_names = {'1': '–ü–ù', '2': '–í–¢', '3': '–°–†', '4': '–ß–¢', '5': '–ü–¢', '6': '–°–ë', '7': '–í–°'}
        days_display = ', '.join([day_names[day] for day in days_list])

        bot.send_message(
            message.chat.id,
            f"‚òëÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
            f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
            f"üìÖ –î–Ω–∏: {days_display}"
        )

    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ùóÔ∏è –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Å –Ω–∞—á–∞–ª–∞"
        )


@bot.message_handler(func=lambda message: message.text == "üìÉ –°–ø–∏—Å–æ–∫")
def show_reminders(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('fitness.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM reminders WHERE user_id = ?', (user_id,))
    reminders = cursor.fetchall()
    conn.close()

    if not reminders:
        bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        return

    response = "üìã –¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
    for reminder in reminders:
        response += f"‚è∞ {reminder[2]} - {reminder[3]}\n"
    bot.send_message(message.chat.id, response)


@bot.message_handler(func=lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å")
def delete_reminder(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('fitness.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM reminders WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "‚òëÔ∏è –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!")


@bot.message_handler(func=lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
def back_to_main(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())


#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–§–∏—Ç–Ω–µ—Å-–±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    init_db()
    init_reminders_db()
    print("–ü—Ä–æ—á–∏—Ç–∞–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()

